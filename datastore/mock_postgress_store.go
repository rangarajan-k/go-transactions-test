// Code generated by MockGen. DO NOT EDIT.
// Source: datastore/postgress_store.go

// Package datastore is a generated GoMock package.
package datastore

import (
	reflect "reflect"

	v10 "github.com/go-pg/pg/v10"
	gomock "github.com/golang/mock/gomock"
)

// MockIPostgressStore is a mock of IPostgressStore interface.
type MockIPostgressStore struct {
	ctrl     *gomock.Controller
	recorder *MockIPostgressStoreMockRecorder
}

// MockIPostgressStoreMockRecorder is the mock recorder for MockIPostgressStore.
type MockIPostgressStoreMockRecorder struct {
	mock *MockIPostgressStore
}

// NewMockIPostgressStore creates a new mock instance.
func NewMockIPostgressStore(ctrl *gomock.Controller) *MockIPostgressStore {
	mock := &MockIPostgressStore{ctrl: ctrl}
	mock.recorder = &MockIPostgressStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPostgressStore) EXPECT() *MockIPostgressStoreMockRecorder {
	return m.recorder
}

// CreateAccountQuery mocks base method.
func (m *MockIPostgressStore) CreateAccountQuery(model *Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountQuery", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccountQuery indicates an expected call of CreateAccountQuery.
func (mr *MockIPostgressStoreMockRecorder) CreateAccountQuery(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountQuery", reflect.TypeOf((*MockIPostgressStore)(nil).CreateAccountQuery), model)
}

// GetAccountDetailsQuery mocks base method.
func (m *MockIPostgressStore) GetAccountDetailsQuery(model *Account) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountDetailsQuery", model)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountDetailsQuery indicates an expected call of GetAccountDetailsQuery.
func (mr *MockIPostgressStoreMockRecorder) GetAccountDetailsQuery(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountDetailsQuery", reflect.TypeOf((*MockIPostgressStore)(nil).GetAccountDetailsQuery), model)
}

// GetMultipleAccountDetailsQuery mocks base method.
func (m *MockIPostgressStore) GetMultipleAccountDetailsQuery(tx *v10.Tx, ids []int) ([]*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultipleAccountDetailsQuery", tx, ids)
	ret0, _ := ret[0].([]*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultipleAccountDetailsQuery indicates an expected call of GetMultipleAccountDetailsQuery.
func (mr *MockIPostgressStoreMockRecorder) GetMultipleAccountDetailsQuery(tx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultipleAccountDetailsQuery", reflect.TypeOf((*MockIPostgressStore)(nil).GetMultipleAccountDetailsQuery), tx, ids)
}

// SubmitTransactionQuery mocks base method.
func (m *MockIPostgressStore) SubmitTransactionQuery(tx *v10.Tx, model *Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitTransactionQuery", tx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitTransactionQuery indicates an expected call of SubmitTransactionQuery.
func (mr *MockIPostgressStoreMockRecorder) SubmitTransactionQuery(tx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTransactionQuery", reflect.TypeOf((*MockIPostgressStore)(nil).SubmitTransactionQuery), tx, model)
}

// UpdateAccountBalanceQuery mocks base method.
func (m *MockIPostgressStore) UpdateAccountBalanceQuery(tx *v10.Tx, models []*Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountBalanceQuery", tx, models)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountBalanceQuery indicates an expected call of UpdateAccountBalanceQuery.
func (mr *MockIPostgressStoreMockRecorder) UpdateAccountBalanceQuery(tx, models interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountBalanceQuery", reflect.TypeOf((*MockIPostgressStore)(nil).UpdateAccountBalanceQuery), tx, models)
}
